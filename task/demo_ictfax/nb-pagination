  paginate: (action: 'next' | 'previous') => void;



  getContactlist() {
    this.contact_service.get_ContactList().then(data => {
      this.aContact = data;
      const initContacts = this.aContact.slice(0, 10);
  
      this.length = initContacts.length;
      this.ContactDataSource = this.dataSourceBuilder.create(initContacts.map(item => ({ data: item })));
  
      const paginate = (action: 'next' | 'previous') => {
        if (action === 'next') {
          const change = (action === 'next') ? 5 : -5;
          const next_Page = this.current_page + change;
          if (next_Page >= 0 && next_Page <= this.aContact.length) {
            this.current_page = next_Page;
            const contacts = this.aContact.slice(this.current_page, this.current_page + 5);
            this.ContactDataSource = this.dataSourceBuilder.create(contacts.map(item => ({ data: item })));
          }
        } else if (action === 'previous') {
          const previous_Page = this.current_page - 5;
          if (previous_Page >= 0) {
            this.current_page = previous_Page;
            const contacts = this.aContact.slice(this.current_page, this.current_page + 5);
            this.ContactDataSource = this.dataSourceBuilder.create(contacts.map(item => ({ data: item })));
          }
        }
      };
  
      window['paginate'] = paginate;
  
      this.paginate = paginate;
    });
  }
    getContactlist() {
    this.contact_service.get_ContactList().then(data => {
        this.aContact = data;
        console.log('all data contactlist', this.aContact);
        const initContacts = this.aContact.slice(0, 5);
        this.length = initContacts.length;  
        this.ContactDataSource = this.dataSourceBuilder.create(initContacts.map(item => ({ data: item })));
    });
}

paginate(page_items: string) {
  const initContacts = this.aContact.slice(0, 5);     
  this.length = initContacts.length;
  if (page_items === 'next') {
    const change = (page_items === 'next') ? 5 : -5;
    const next_Page = this.current_page + change;
    if (next_Page >= 0 && next_Page <= this.aContact.length) {
      this.current_page = next_Page;
      const contacts = this.aContact.slice(this.current_page, this.current_page + 5);
      this.ContactDataSource = this.dataSourceBuilder.create(contacts.map(item => ({ data: item })));
    }
  } else if (page_items === 'previous') {
    const previous_Page = this.current_page - 5;
    if (previous_Page >= 0) {
      this.current_page = previous_Page;
      const contacts = this.aContact.slice(this.current_page, this.current_page + 5);
      this.ContactDataSource = this.dataSourceBuilder.create(contacts.map(item => ({ data: item })));
    }
  }
}


  // getContactlist() {
  //   this.contact_service.get_ContactList().then(data => {
  //     this.contactArray = data.map(contact => ({
  //       contact_id: contact.contact_id ?? '',
  //       first_name: contact.first_name ?? '',
  //       last_name: contact.last_name ?? '',
  //       email: contact.email ?? '',
  //       phone: contact.phone ?? '',
  //       operations: contact.operations ?? ''
  //     }));
  
  //     this.contactArray.sort((a, b) => {
  //       const firstNameA = a.first_name ?? '';
  //       const firstNameB = b.first_name ?? '';
  
  //       return firstNameA.localeCompare(firstNameB);
  //     });
  
  //     this.length = this.contactArray.length;
  //     this.dataSource = this.dataSourceBuilder.create(this.contactArray.map(item => ({ data: item })));
  //   });
  // }
  

  // getContactlist() {
  //   this.contact_service.get_ContactList().then(data => {
  //     this.contactArray = data;
  //     this.contactArray.sort((a, b) => {
  //       const contactId = a.contact_id ?? '';
  //       const firstName = b.first_name ?? '';
  
  //       if (typeof contactId === 'string' && typeof firstName === 'string') {
  //         return contactId.localeCompare(firstName);
  //       } else if (typeof contactId === 'string') {
  //         return -1;
  //       } else if (typeof firstName === 'string') {
  //         return 1;
  //       } else {
  //         return 0;
  //       }
  //     });
  
  //     this.length = this.contactArray.length;
  //     this.dataSource = this.dataSourceBuilder.create(this.contactArray.map(item => ({ data: item })));
  //   });
  // }

  
  //   if (a.first_name && b.first_name) {
  //     return a.first_name.localeCompare(b.first_name);
  //   } else if (a.first_name) {
  //     return -1;
  //   } else if (b.first_name) {
  //     return 1;
  //   } else {
  //     return 0;
  //   }
  // });
  
    items_page = [5, 10, 25, 100];
  pageSize = 10;
  currentPage = 1;
  currentItemsCount: number = 0;
  
    getContactlist() {
    this.contact_service.get_ContactList().then(data => {
      this.contactArray = data;
      this.contactArray.sort((a, b) => b.contact_id - a.contact_id);
      this.length = this.contactArray.length;
      const Contact_list = this.contactArray.slice(0, 10);
      this.dataSource = this.dataSourceBuilder.create(Contact_list.map(item => ({ data: item })));
    });
  }

  // paginate(page_items: string | number) {
  //   if (typeof page_items === 'string') {
  //     if (page_items === 'next') {
  //       this.currentPage = Math.min(this.currentPage + 1, Math.ceil(this.contactArray.length / this.pageSize));
  //     } else if (page_items === 'previous') {
  //       this.currentPage = Math.max(this.currentPage - 1, 1);
  //     }
  //   }
  // paginate(page_items: string | number) {
  //   if (typeof page_items === 'string') {
  //       this.currentPage = (page_items === 'next') 
  //           ? Math.min(this.currentPage + 1, this.getTotalPages()) 
  //           : Math.max(this.currentPage - 1, 1);
  //   }
  paginate(page_items: string | number) {
    if (typeof page_items === 'string') {
        if (page_items === 'next') {
            if (this.currentPage < this.getTotalPages()) {
                this.currentPage++;
            }
        } else if (page_items === 'previous') {
            if (this.currentPage > 1) {
                this.currentPage--;
            }
        }
    } 
     else {
      this.pageSize = page_items;
      this.currentPage = 1;
    }
    const start = (this.currentPage - 1) * this.pageSize;
    const end = Math.min(start + this.pageSize, this.contactArray.length);
    const slicedData = this.contactArray.slice(start, end);
    this.dataSource = this.dataSourceBuilder.create(slicedData.map(item => ({ data: item })));
    this.currentItemsCount = end - start;

  } 

  getTotalPages(): number {
    return Math.ceil(this.contactArray.length / this.pageSize); // Calculate total pages correctly
} 
  // getTotalPages(): number {
  //   return Math.min(this.currentPage * this.pageSize, this.contactArray.length);
  // } 
//   getTotalPages(): number {
//     return Math.ceil(this.contactArray.length / this.pageSize);
// }




  items_page = [5, 10, 25, 100];
  pageSize = 10;
  startIndex: number = 0;
  currentItemsCount: number = 0;
  currentPage: number;
  totalPages: number;
  minimumItems: number;
  getContactlist() {
    this.contact_service.get_ContactList().then(data => {
      this.contactArray = data.sort((a, b) => b.contact_id - a.contact_id);
      this.length = data.length;



      const start = this.startIndex;
      const end = Math.min(start + this.pageSize, this.length);
      const slicedData = this.contactArray.slice(start, end);
      this.dataSource = this.dataSourceBuilder.create(slicedData.map(item => ({ data: item })));
      this.currentItemsCount = end - start;

      // const start = (this.currentPage - 1) * this.pageSize;
      // const end = Math.min(start + this.pageSize, this.length);
      // const slicedData = this.contactArray.slice(start, end);
      // this.dataSource = this.dataSourceBuilder.create(slicedData.map(item => ({ data: item })));
      // this.currentItemsCount = end - start;
    });
  }
  paginate(page_items: string | number) {
    if (typeof page_items === 'string') {
        if (page_items === 'next') {
            if (this.startIndex + this.pageSize < this.length) {
                this.startIndex += this.pageSize;  // Increment startIndex
            }
        } else if (page_items === 'previous') {
            if (this.startIndex > 0) {
                this.startIndex -= this.pageSize;  // Decrement startIndex
            }
        }
    } else {
        this.pageSize = page_items;
        this.startIndex = 0;  // Reset startIndex when pageSize changes
    }
    
    // Calculate and update currentPage, totalPages, and minimumItems
    this.currentPage = Math.floor(this.startIndex / this.pageSize) + 1;
    this.totalPages = Math.ceil(this.length / this.pageSize);
    this.minimumItems = Math.min(this.startIndex + this.pageSize, this.contactArray.length);
    
    this.getContactlist();
}
//   paginate(page_items: string | number) {
//     if (typeof page_items === 'string') {
//         if (page_items === 'next') {
//             if (this.startIndex + this.pageSize < this.length) {
//                 this.startIndex += this.pageSize;  // Increment startIndex
//             }
//         } else if (page_items === 'previous') {
//             if (this.startIndex > 0) {
//                 this.startIndex -= this.pageSize;  // Decrement startIndex
//             }
//         }
//     } else {
//         this.pageSize = page_items;
//         this.startIndex = 0;  // Reset startIndex when pageSize changes
//     }
//     this.getContactlist();
// }
// getCurrentPage(): number {
//   return Math.floor(this.startIndex / this.pageSize) + 1;
// }
// getTotalPages(): number {
//     return Math.ceil(this.length / this.pageSize);
// }
// getMinimumItems(): number {
//   return Math.min(this.startIndex + this.pageSize, this.contactArray.length);
// }
//   paginate(page_items: string | number) {
//     if (typeof page_items === 'string') {
//         if (page_items === 'next') {
//             if (this.currentPage < this.getTotalPages()) {
//                 this.currentPage++;
//             }
//         } else if (page_items === 'previous') {
//             if (this.currentPage > 1) {
//                 this.currentPage--;
//             }
//         }
//     } else {
//       this.pageSize = page_items;
//       this.currentPage = 1;
//     }
//     this.getContactlist();
//   } 

//   getTotalPages(): number {
//     return Math.ceil(this.length / this.pageSize);
// } 


 
  getContactlist() {
    this.contact_service.get_ContactList().then(data => {
      this.contactArray = data.sort((a, b) => b.contact_id - a.contact_id);
      this.length = data.length;
      this.paginate(this.pageSize);
      this.dataSource = this.dataSourceBuilder.create(this.currentItems.map(item => ({ data: item })));
    });
  }

  paginate(page_Items: string | number) {
    if (typeof page_Items === 'string') {
      if (page_Items === 'next') {
        if (this.startIndex + this.pageSize < this.length) {
          this.startIndex += this.pageSize; 
        }
      } else if (page_Items === 'previous') {
        if (this.startIndex > 0) {
          this.startIndex -= this.pageSize;
        }
      }
    } else {
      this.pageSize = page_Items;
      this.startIndex = 0; 
    }
    this.currentPage = Math.floor(this.startIndex / this.pageSize) + 1;
    this.totalPages = Math.ceil(this.length / this.pageSize);
    this.minimumItems = Math.min(this.startIndex + this.pageSize, this.length);    
    
    const end = Math.min(this.startIndex + this.pageSize, this.length);
    this.currentItems = this.contactArray.slice(this.startIndex, end); 
    this.dataSource = this.dataSourceBuilder.create(this.currentItems.map(item => ({ data: item })));
  }




